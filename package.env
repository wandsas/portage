# vim: fenc=utf-8 ft=env
# Using clang compiler
# sys-kernel/vanilla-sources compiler-clang.conf
# build llvm with -lgcc_s included to resolve __register_frame / __deregister_frame undefined
# symbols
sys-devel/llvm with-lgcc_s.conf
# build sysvinit with gcc to workaround "cannot specify -o when generating multiple output files"
sys-apps/sysvinit compiler-gcc.conf
# use gcc with builds which ignore/filter out use of lld linker (which causes "not an object or
# archive" when linking with GNU ld)
dev-libs/popt compiler-gcc.conf
sys-libs/binutils-libs compiler-gcc.conf
# build sandbox with gcc as it fails during configure with "configure: error: Unable to determine
# LIBC PATH ( )"
sys-apps/sandbox compiler-gcc.conf
# use gcc for packages that have inline assembler that doesn't work with clang
dev-libs/libgcrypt compiler-gcc.conf
# use gcc for efibootmgr since the compile process fails with clang
sys-boot/efibootmgr compiler-gcc.conf
# build gettext with -lm included to resolve "undefined symbol: sqrt" and "undefined symbol: log10"
# link errors
sys-devel/gettext with-lm.conf
# build busybox with gcc since it has some odd math-related link errors (even with -lm)
sys-apps/busybox compiler-gcc.conf
# build elfutils with gcc since configure says "gcc with GNU99 support required"
dev-libs/elfutils compiler-gcc.conf
# build gcc with gcc since building with clang spawns a massive amount of warnings related to rtl.h
# (maybe not strictly required, but does drastically slow down the compile process)
sys-devel/gcc compiler-gcc.conf
dev-libs/libgcrypt compiler-gcc.conf
